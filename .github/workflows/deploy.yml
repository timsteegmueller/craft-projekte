name: 🚀 Craft CMS Deployment with Backup

on:
  # Automatisch nach PR Merge
  push:
    branches: [ main, master ]
    paths:
      - 'craft-repo/**'
      - 'composer.json'
      - 'composer.lock'
      - 'config/**'
      - 'templates/**'
  
  # Manueller Trigger
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment Environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      skip_backup:
        description: 'Skip Database Backup?'
        required: false
        default: false
        type: boolean
      skip_health_check:
        description: 'Skip Health Check?'
        required: false
        default: false
        type: boolean
      rollback_commit:
        description: 'Rollback to specific commit (optional)'
        required: false
      force_deploy:
        description: 'Force deployment (ignore checks)'
        required: false
        default: false
        type: boolean

env:
  DEPLOYMENT_TIMEOUT: 300
  HEALTH_CHECK_RETRIES: 3

jobs:
  pre-deployment:
    name: 🔍 Pre-Deployment Checks
    runs-on: ubuntu-latest
    outputs:
      deploy_environment: ${{ steps.env.outputs.environment }}
      backup_required: ${{ steps.env.outputs.backup_required }}
      deployment_branch: ${{ steps.env.outputs.deployment_branch }}
      
    steps:
    - name: 🔄 Repository auschecken
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🔧 Environment Setup
      id: env
      run: |
        # Environment bestimmen
        if [ "${{ github.event_name }}" = "push" ]; then
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            environment="production"
          else
            environment="staging"
          fi
          backup_required="true"
        else
          environment="${{ github.event.inputs.environment }}"
          backup_required="${{ !github.event.inputs.skip_backup }}"
        fi
        
        # Branch für Deployment
        if [ -n "${{ github.event.inputs.rollback_commit }}" ]; then
          deployment_branch="${{ github.event.inputs.rollback_commit }}"
        else
          deployment_branch="${{ github.ref_name }}"
        fi
        
        echo "environment=${environment}" >> $GITHUB_OUTPUT
        echo "backup_required=${backup_required}" >> $GITHUB_OUTPUT
        echo "deployment_branch=${deployment_branch}" >> $GITHUB_OUTPUT
        
        echo "🎯 Deployment Environment: ${environment}"
        echo "💾 Backup Required: ${backup_required}"
        echo "🌿 Deployment Branch: ${deployment_branch}"

    - name: 🔍 Pre-Deployment Validierung
      run: |
        echo "🔍 Validiere Deployment Voraussetzungen..."
        
        # Composer.json validieren
        if [ -f "composer.json" ]; then
          echo "✅ composer.json gefunden"
        else
          echo "❌ composer.json nicht gefunden!"
          exit 1
        fi
        
        # .env.example prüfen
        if [ -f ".env.example" ]; then
          echo "✅ .env.example gefunden"
        fi
        
        # Craft CMS spezifische Dateien
        if [ -f "craft" ]; then
          echo "✅ Craft Console gefunden"
        fi
        
        echo "✅ Pre-Deployment Validierung erfolgreich"

  database-backup:
    name: 💾 Database Backup
    runs-on: ubuntu-latest
    needs: pre-deployment
    if: needs.pre-deployment.outputs.backup_required == 'true'
    outputs:
      backup_file: ${{ steps.backup.outputs.backup_file }}
      backup_path: ${{ steps.backup.outputs.backup_path }}
      backup_success: ${{ steps.backup.outputs.success }}
      
    steps:
    - name: 💾 Server-seitiges Database Backup
      id: backup
      run: |
        environment="${{ needs.pre-deployment.outputs.deploy_environment }}"
        timestamp=$(date +%Y%m%d_%H%M%S)
        
        echo "💾 Erstelle Database Backup für ${environment}..."
        
        # SSH zum Server und Backup erstellen
        ssh -o StrictHostKeyChecking=no \
            -o ConnectTimeout=30 \
            ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << EOF
          # Backup-Verzeichnis erstellen
          sudo mkdir -p /var/backups/craft-cms/\$(date +%Y/%m/%d)
          
          # Backup-Dateiname
          BACKUP_FILE="craft_${environment}_backup_${timestamp}.sql"
          BACKUP_PATH="/var/backups/craft-cms/\$(date +%Y/%m/%d)/\${BACKUP_FILE}"
          
          echo "🗄️ Erstelle MySQL Dump: \${BACKUP_PATH}"
          
          # MySQL Dump mit allen wichtigen Optionen
          mysqldump --single-transaction \\
                    --routines \\
                    --triggers \\
                    --events \\
                    --lock-tables=false \\
                    --add-drop-table \\
                    --create-options \\
                    --disable-keys \\
                    --extended-insert \\
                    --quick \\
                    --set-charset \\
                    -h \${{ secrets.DB_HOST || 'localhost' }} \\
                    -u \${{ secrets.DB_USER }} \\
                    -p\${{ secrets.DB_PASSWORD }} \\
                    \${{ secrets.DB_NAME }} > \${BACKUP_PATH}
          
          # Backup komprimieren
          gzip \${BACKUP_PATH}
          BACKUP_PATH="\${BACKUP_PATH}.gz"
          
          # Berechtigungen setzen
          sudo chown www-data:www-data \${BACKUP_PATH}
          sudo chmod 644 \${BACKUP_PATH}
          
          # Backup-Info ausgeben
          BACKUP_SIZE=\$(du -h \${BACKUP_PATH} | cut -f1)
          echo "✅ Backup erstellt: \${BACKUP_PATH}"
          echo "📊 Backup-Größe: \${BACKUP_SIZE}"
          
          # Backup-Metadaten erstellen
          cat > \${BACKUP_PATH%.gz}.info << INFOEOF
        Craft CMS Database Backup
        =========================
        Timestamp: \$(date)
        Environment: ${environment}
        Database: \${{ secrets.DB_NAME }}
        File: \$(basename \${BACKUP_PATH})
        Size: \${BACKUP_SIZE}
        Git Commit: \$(cd /var/www/\${{ secrets.CRAFT_PROJECT_PATH }} && git rev-parse HEAD)
        Server: \$(hostname)
        INFOEOF
          
          # Alte Backups aufräumen (älter als 7 Tage)
          find /var/backups/craft-cms -name "*.sql.gz" -mtime +7 -delete
          find /var/backups/craft-cms -name "*.info" -mtime +7 -delete
          echo "🧹 Alte Backups (>7 Tage) gelöscht"
          
          # Aktuelle Backups anzeigen
          echo "📂 Aktuelle Backups in \$(date +%Y/%m/%d):"
          ls -la /var/backups/craft-cms/\$(date +%Y/%m/%d)/
          
          # Für GitHub Actions Output
          echo "\${BACKUP_FILE}.gz"
          echo "\${BACKUP_PATH}"
        EOF
        
        # Backup-Info für GitHub Actions
        backup_file="craft_${environment}_backup_${timestamp}.sql.gz"
        backup_path="/var/backups/craft-cms/$(date +%Y/%m/%d)/${backup_file}"
        
        echo "backup_file=${backup_file}" >> $GITHUB_OUTPUT
        echo "backup_path=${backup_path}" >> $GITHUB_OUTPUT
        echo "success=true" >> $GITHUB_OUTPUT
        echo "✅ Server-seitiges Database Backup erfolgreich erstellt!"

    - name: 📊 Backup Verification
      run: |
        echo "🔍 Verifiziere Backup auf Server..."
        
        ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << EOF
          BACKUP_PATH="${{ steps.backup.outputs.backup_path }}"
          
          if [ -f "\${BACKUP_PATH}" ]; then
            echo "✅ Backup-Datei existiert: \${BACKUP_PATH}"
            echo "📊 Größe: \$(du -h \${BACKUP_PATH} | cut -f1)"
            
            # Backup-Integrität prüfen
            if zcat \${BACKUP_PATH} | head -5 | grep -q "MySQL dump"; then
              echo "✅ Backup-Integrität OK"
            else
              echo "❌ Backup-Integrität FEHLER"
              exit 1
            fi
          else
            echo "❌ Backup-Datei nicht gefunden!"
            exit 1
          fi
        EOF

  deployment:
    name: 🚀 Craft CMS Deployment
    runs-on: ubuntu-latest
    needs: [pre-deployment, database-backup]
    if: always() && (needs.database-backup.result == 'success' || needs.database-backup.result == 'skipped')
    outputs:
      deployment_success: ${{ steps.deploy.outputs.success }}
      deployment_url: ${{ steps.deploy.outputs.url }}
      git_commit: ${{ steps.deploy.outputs.git_commit }}
      
    steps:
    - name: 🚀 Craft CMS Deployment
      id: deploy
      timeout-minutes: 10
      run: |
        environment="${{ needs.pre-deployment.outputs.deploy_environment }}"
        branch="${{ needs.pre-deployment.outputs.deployment_branch }}"
        
        echo "🚀 Deploying Craft CMS to ${environment} (Branch: ${branch})..."
        
        # SSH Deployment mit erweiterten Optionen
        ssh -o StrictHostKeyChecking=no \
            -o ConnectTimeout=30 \
            -o ServerAliveInterval=10 \
            ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << EOF
          # Deployment-Start-Zeit
          START_TIME=\$(date +%s)
          echo "⏰ Deployment gestartet: \$(date)"
          
          # Craft CMS Verzeichnis
          PROJECT_PATH="/var/www/\${{ secrets.CRAFT_PROJECT_PATH }}"
          cd \${PROJECT_PATH}
          
          # Git-Info vor Update
          echo "📋 Aktueller Git Status:"
          git log -1 --format="Commit: %H%nAuthor: %an%nDate: %ad%nMessage: %s" --date=format:'%Y-%m-%d %H:%M:%S'
          
          # Maintenance Mode aktivieren (falls verfügbar)
          if [ -f "craft" ]; then
            echo "🔧 Aktiviere Maintenance Mode..."
            php craft system/on-maintenance || echo "⚠️ Maintenance Mode nicht verfügbar"
          fi
          
          # Git Pull/Checkout
          echo "📥 Updating Git repository..."
          git fetch origin
          
          if [ "${branch}" != "\$(git rev-parse --abbrev-ref HEAD)" ]; then
            git checkout ${branch}
          fi
          
          git reset --hard origin/${branch}
          
          # Git-Info nach Update
          NEW_COMMIT=\$(git rev-parse HEAD)
          echo "📋 Neuer Git Status:"
          git log -1 --format="Commit: %H%nAuthor: %an%nDate: %ad%nMessage: %s" --date=format:'%Y-%m-%d %H:%M:%S'
          
          # Composer Dependencies
          echo "📦 Installing/Updating Composer dependencies..."
          composer install --no-interaction \\
                          --prefer-dist \\
                          --optimize-autoloader \\
                          --no-dev \\
                          --no-progress \\
                          --no-suggest
          
          # File Permissions
          echo "🔧 Setting file permissions..."
          sudo chown -R www-data:www-data storage/
          sudo chown -R www-data:www-data config/
          sudo chown -R www-data:www-data web/uploads/
          sudo chmod -R 755 storage/
          sudo chmod -R 644 storage/logs/
          sudo chmod -R 755 web/uploads/
          
          # Craft CMS Commands
          if [ -f "craft" ]; then
            echo "⚡ Running Craft CMS maintenance commands..."
            
            # Cache löschen
            php craft clear-caches/all --no-interaction
            
            # Database Migrations
            php craft migrate/all --no-interaction --interactive=false
            
            # Project Config anwenden
            php craft project-config/apply --no-interaction --force
            
            # Search Index rebuild (falls nötig)
            php craft search-indexes/rebuild --no-interaction || echo "⚠️ Search index rebuild skipped"
            
            # Asset Transforms löschen (optional)
            php craft asset-transforms/delete-stale-transforms --no-interaction || echo "⚠️ Asset transforms cleanup skipped"
          fi
          
          # Frontend Build (falls vorhanden)
          if [ -f "package.json" ]; then
            echo "🎨 Building frontend assets..."
            if command -v npm >/dev/null 2>&1; then
              npm ci --production --silent
              npm run production --silent || npm run build --silent || echo "⚠️ Frontend build failed"
            fi
          fi
          
          # Maintenance Mode deaktivieren
          if [ -f "craft" ]; then
            echo "🔓 Deaktiviere Maintenance Mode..."
            php craft system/off-maintenance || echo "⚠️ Maintenance Mode deaktivierung fehlgeschlagen"
          fi
          
          # Deployment-End-Zeit
          END_TIME=\$(date +%s)
          DURATION=\$((END_TIME - START_TIME))
          
          echo "✅ Deployment completed successfully!"
          echo "⏰ Deployment-Dauer: \${DURATION} Sekunden"
          echo "📍 Git Commit: \${NEW_COMMIT}"
          
          # Deployment-Log erstellen
          cat > storage/logs/deployment-\$(date +%Y%m%d_%H%M%S).log << LOGEOF
        Craft CMS Deployment Log
        ========================
        Environment: ${environment}
        Branch: ${branch}
        Start Time: \$(date -d @\${START_TIME})
        End Time: \$(date -d @\${END_TIME})
        Duration: \${DURATION} seconds
        Git Commit: \${NEW_COMMIT}
        Deployed by: GitHub Actions
        LOGEOF
          
          # Output für GitHub Actions
          echo "\${NEW_COMMIT}"
        EOF
        
        # Deployment URLs setzen
        if [ "${environment}" = "production" ]; then
          url="https://${{ secrets.PRODUCTION_DOMAIN }}"
        else
          url="https://${{ secrets.STAGING_DOMAIN }}"
        fi
        
        # Git Commit von Server abrufen
        git_commit=$(ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "cd /var/www/${{ secrets.CRAFT_PROJECT_PATH }} && git rev-parse HEAD")
        
        echo "success=true" >> $GITHUB_OUTPUT
        echo "url=${url}" >> $GITHUB_OUTPUT
        echo "git_commit=${git_commit}" >> $GITHUB_OUTPUT
        echo "✅ Deployment to ${environment} completed: ${url}"

  health-check:
    name: 🏥 Health Check
    runs-on: ubuntu-latest
    needs: [pre-deployment, deployment]
    if: needs.deployment.outputs.deployment_success == 'true' && !inputs.skip_health_check
    
    steps:
    - name: 🏥 Website Health Check
      timeout-minutes: 5
      run: |
        url="${{ needs.deployment.outputs.deployment_url }}"
        max_retries=${{ env.HEALTH_CHECK_RETRIES }}
        retry_count=0
        
        echo "🔍 Health Check für ${url}..."
        echo "🔄 Max Retries: ${max_retries}"
        
        while [ $retry_count -lt $max_retries ]; do
          echo "🔍 Versuch $((retry_count + 1))/${max_retries}..."
          
          # HTTP Status Check
          status_code=$(curl -s -o /dev/null -w "%{http_code}" --max-time 30 "${url}" || echo "000")
          response_time=$(curl -s -o /dev/null -w "%{time_total}" --max-time 30 "${url}" || echo "0")
          
          echo "📊 Status Code: ${status_code}"
          echo "⏱️ Response Time: ${response_time}s"
          
          if [ "${status_code}" = "200" ]; then
            echo "✅ Health Check PASSED!"
            
            # Erweiterte Checks
            echo "🔍 Erweiterte Health Checks..."
            
            # Admin Panel erreichbar?
            admin_status=$(curl -s -o /dev/null -w "%{http_code}" --max-time 15 "${url}/admin" || echo "000")
            echo "🔐 Admin Panel Status: ${admin_status}"
            
            # Craft-spezifische Checks
            if curl -s --max-time 15 "${url}" | grep -qi "craft\|cms" > /dev/null 2>&1; then
              echo "✅ Craft CMS Content gefunden"
            fi
            
            # Performance Check
            if (( $(echo "${response_time} < 5.0" | bc -l) )); then
              echo "✅ Performance OK (${response_time}s < 5s)"
            else
              echo "⚠️ Performance Warning (${response_time}s >= 5s)"
            fi
            
            break
          else
            echo "❌ Health Check failed: ${status_code}"
            retry_count=$((retry_count + 1))
            
            if [ $retry_count -lt $max_retries ]; then
              echo "⏳ Warte 30 Sekunden vor nächstem Versuch..."
              sleep 30
            fi
          fi
        done
        
        if [ $retry_count -eq $max_retries ]; then
          echo "❌ Health Check failed nach ${max_retries} Versuchen!"
          exit 1
        fi

  notification:
    name: 📱 Deployment Notification
    runs-on: ubuntu-latest
    needs: [pre-deployment, database-backup, deployment, health-check]
    if: always()
    
    steps:
    - name: 📊 Deployment Summary
      run: |
        environment="${{ needs.pre-deployment.outputs.deploy_environment }}"
        
        echo "## 📊 Deployment Summary"
        echo "**Environment:** ${environment}"
        echo "**Branch:** ${{ needs.pre-deployment.outputs.deployment_branch }}"
        echo "**Git Commit:** ${{ needs.deployment.outputs.git_commit }}"
        echo "**URL:** ${{ needs.deployment.outputs.deployment_url }}"
        
        # Status Summary
        echo "### Status Overview:"
        echo "- **Pre-Deployment:** ${{ needs.pre-deployment.result }}"
        echo "- **Database Backup:** ${{ needs.database-backup.result }}"
        echo "- **Deployment:** ${{ needs.deployment.result }}"
        echo "- **Health Check:** ${{ needs.health-check.result }}"

    - name: 📱 Slack Notification
      if: secrets.SLACK_WEBHOOK_URL != ''
      run: |
        environment="${{ needs.pre-deployment.outputs.deploy_environment }}"
        
        # Overall Status bestimmen
        if [ "${{ needs.deployment.result }}" = "success" ] && [ "${{ needs.health-check.result }}" = "success" ]; then
          status="✅ SUCCESS"
          color="good"
          emoji="🎉"
        elif [ "${{ needs.deployment.result }}" = "success" ] && [ "${{ needs.health-check.result }}" = "skipped" ]; then
          status="✅ SUCCESS (Health Check Skipped)"
          color="good"
          emoji="✅"
        else
          status="❌ FAILED"
          color="danger"
          emoji="🚨"
        fi
        
        # Backup Info
        if [ "${{ needs.database-backup.result }}" = "success" ]; then
          backup_info="✅ ${{ needs.database-backup.outputs.backup_file }}"
        elif [ "${{ needs.database-backup.result }}" = "skipped" ]; then
          backup_info="⏭️ Skipped"
        else
          backup_info="❌ Failed"
        fi
        
        # Git Info
        git_short="${{ needs.deployment.outputs.git_commit }}"
        git_short="${git_short:0:8}"
        
        # Slack Payload
        curl -X POST -H 'Content-type: application/json' \
          --data '{
            "text": "'${emoji}' Craft CMS Deployment - '${environment}'",
            "attachments": [
              {
                "color": "'${color}'",
                "title": "🚀 Craft CMS Deployment",
                "fields": [
                  {
                    "title": "Status",
                    "value": "'${status}'",
                    "short": true
                  },
                  {
                    "title": "Environment", 
                    "value": "'${environment}'",
                    "short": true
                  },
                  {
                    "title": "Git Commit",
                    "value": "'${git_short}'",
                    "short": true
                  },
                  {
                    "title": "Database Backup",
                    "value": "'${backup_info}'",
                    "short": true
                  },
                  {
                    "title": "Website",
                    "value": "<${{ needs.deployment.outputs.deployment_url }}|Open Website>",
                    "short": false
                  }
                ],
                "footer": "GitHub Actions • Craft CMS",
                "ts": '$(date +%s)'
              }
            ]
          }' ${{ secrets.SLACK_WEBHOOK_URL }}

  rollback:
    name: 🔄 Emergency Rollback
    runs-on: ubuntu-latest
    needs: [pre-deployment, database-backup, deployment, health-check]
    if: failure() && needs.database-backup.outputs.backup_success == 'true'
    
    steps:
    - name: 🚨 Emergency Rollback Procedure
      timeout-minutes: 5
      run: |
        echo "🚨 EMERGENCY ROLLBACK INITIATED!"
        echo "💾 Using backup: ${{ needs.database-backup.outputs.backup_file }}"
        
        ssh -o StrictHostKeyChecking=no \
            ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << EOF
          echo "🔄 Starting emergency rollback..."
          
          cd /var/www/${{ secrets.CRAFT_PROJECT_PATH }}
          
          # Maintenance Mode aktivieren
          if [ -f "craft" ]; then
            php craft system/on-maintenance || echo "⚠️ Maintenance mode failed"
          fi
          
          # Git Rollback zum vorherigen funktionierenden Commit
          echo "📂 Git rollback..."
          git reset --hard HEAD~1
          
          # Database Rollback
          echo "🗄️ Database rollback..."
          backup_path="${{ needs.database-backup.outputs.backup_path }}"
          
          if [ -f "\${backup_path}" ]; then
            zcat \${backup_path} | mysql -h ${{ secrets.DB_HOST || 'localhost' }} \\
                                         -u ${{ secrets.DB_USER }} \\
                                         -p${{ secrets.DB_PASSWORD }} \\
                                         ${{ secrets.DB_NAME }}
            echo "✅ Database restored from backup"
          else
            echo "❌ Backup file not found: \${backup_path}"
          fi
          
          # Composer Install (sicherstellen)
          composer install --no-interaction --prefer-dist --optimize-autoloader --no-dev
          
          # Craft Caches löschen
          if [ -f "craft" ]; then
            php craft clear-caches/all --no-interaction
            php craft system/off-maintenance || echo "⚠️ Maintenance mode off failed"
          fi
          
          echo "🔄 Emergency rollback completed!"
        EOF
        
        echo "✅ Emergency rollback procedure completed!"

    - name: 🚨 Rollback Notification
      if: secrets.SLACK_WEBHOOK_URL != ''
      run: |
        curl -X POST -H 'Content-type: application/json' \
          --data '{
            "text": "🚨 EMERGENCY ROLLBACK EXECUTED",
            "attachments": [
              {
                "color": "warning",
                "title": "🔄 Craft CMS Emergency Rollback",
                "text": "Deployment failed - automatic rollback executed using database backup: ${{ needs.database-backup.outputs.backup_file }}",
                "footer": "GitHub Actions Emergency Response",
                "ts": '$(date +%s)'
              }
            ]
          }' ${{ secrets.SLACK_WEBHOOK_URL }}
