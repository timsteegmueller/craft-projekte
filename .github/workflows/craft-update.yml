name: 🚀 Craft CMS Auto Update & PR

on:
  schedule:
    - cron: '0 3 * * 0'  # Jeden Sonntag um 3 Uhr
  workflow_dispatch:
    inputs:
      update_type:
        description: 'Art des Updates'
        required: false
        default: 'manual'
        type: choice
        options:
          - manual
          - weekly-schedule
          - security-update
          - dependency-update
      triggered_by:
        description: 'Triggered by'
        required: false
        default: 'manual'
        type: choice
        options:
          - manual
          - n8n-automation
          - github-scheduler
          - security-alert
      target_repo:
        description: 'Target Repository'
        required: false
        default: 'craft-test-repo'

jobs:
  pre-update-backup:
    name: 💾 Pre-Update Database Backup
    runs-on: ubuntu-latest
    outputs:
      backup_file: ${{ steps.backup.outputs.backup_file }}
      backup_success: ${{ steps.backup.outputs.success }}
      
    steps:
    - name: 💾 Server-seitiges Database Backup
      id: backup
      run: |
        timestamp=$(date +%Y%m%d_%H%M%S)
        
        echo "💾 Erstelle Pre-Update Database Backup..."
        
        ssh -o StrictHostKeyChecking=no \
            ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
          # Backup-Verzeichnis erstellen
          sudo mkdir -p /var/backups/craft-cms/$(date +%Y/%m/%d)
          
          # Backup-Dateiname
          BACKUP_FILE="craft_pre_update_backup_$(date +%Y%m%d_%H%M%S).sql"
          BACKUP_PATH="/var/backups/craft-cms/$(date +%Y/%m/%d)/${BACKUP_FILE}"
          
          echo "🗄️ Erstelle MySQL Dump: ${BACKUP_PATH}"
          
          # MySQL Dump mit allen Optionen
          mysqldump --single-transaction \
                    --routines \
                    --triggers \
                    --events \
                    --lock-tables=false \
                    --add-drop-table \
                    --create-options \
                    --disable-keys \
                    --extended-insert \
                    --quick \
                    --set-charset \
                    -h ${{ secrets.DB_HOST || 'localhost' }} \
                    -u ${{ secrets.DB_USER }} \
                    -p${{ secrets.DB_PASSWORD }} \
                    ${{ secrets.DB_NAME }} > ${BACKUP_PATH}
          
          # Backup komprimieren
          gzip ${BACKUP_PATH}
          BACKUP_PATH="${BACKUP_PATH}.gz"
          
          # Berechtigungen setzen
          sudo chown www-data:www-data ${BACKUP_PATH}
          sudo chmod 644 ${BACKUP_PATH}
          
          # Backup-Info
          BACKUP_SIZE=$(du -h ${BACKUP_PATH} | cut -f1)
          echo "✅ Pre-Update Backup erstellt: ${BACKUP_PATH}"
          echo "📊 Backup-Größe: ${BACKUP_SIZE}"
          
          # Backup-Metadaten
          cat > ${BACKUP_PATH%.gz}.info << INFOEOF
        Craft CMS Pre-Update Backup
        ===========================
        Timestamp: $(date)
        Purpose: Pre-Update Safety Backup
        Database: ${{ secrets.DB_NAME }}
        File: $(basename ${BACKUP_PATH})
        Size: ${BACKUP_SIZE}
        Git Commit: $(cd /var/www/${{ secrets.CRAFT_PROJECT_PATH }} && git rev-parse HEAD)
        Server: $(hostname)
        INFOEOF
          
          # Alte Backups aufräumen (älter als 30 Tage)
          find /var/backups/craft-cms -name "*pre_update*.sql.gz" -mtime +30 -delete
          echo "🧹 Alte Pre-Update Backups gelöscht"
          
          # Output für GitHub Actions
          echo "${BACKUP_FILE}.gz"
        EOF
        
        echo "backup_file=craft_pre_update_backup_${timestamp}.sql.gz" >> $GITHUB_OUTPUT
        echo "success=true" >> $GITHUB_OUTPUT
        echo "✅ Pre-Update Database Backup erfolgreich!"

  craft-update:
    name: 🔄 Craft CMS Update Check & PR
    runs-on: ubuntu-latest
    needs: pre-update-backup
    if: needs.pre-update-backup.outputs.backup_success == 'true'
    outputs:
      updates_available: ${{ steps.updates.outputs.updates_available }}
      pr_created: ${{ steps.pr.outputs.pr_created }}
      pr_number: ${{ steps.pr.outputs.pr_number }}
      
    steps:
    - name: 🔄 Repository auschecken
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: 📋 Workflow Info
      id: info
      run: |
        echo "🎯 Update Type: ${{ inputs.update_type || 'scheduled' }}"
        echo "🤖 Triggered by: ${{ inputs.triggered_by || 'github-scheduler' }}"
        echo "📦 Target Repo: ${{ inputs.target_repo || 'craft-test-repo' }}"
        echo "💾 Backup File: ${{ needs.pre-update-backup.outputs.backup_file }}"
        
        echo "update_type=${{ inputs.update_type || 'scheduled' }}" >> $GITHUB_OUTPUT
        echo "triggered_by=${{ inputs.triggered_by || 'github-scheduler' }}" >> $GITHUB_OUTPUT

    - name: 🐘 PHP Setup
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'
        extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql, dom, filter, gd, json, mbstring, pdo, zip
        tools: composer:v2

    - name: 📦 Composer Cache
      uses: actions/cache@v3
      with:
        path: ~/.composer/cache
        key: composer-${{ runner.os }}-${{ hashFiles('**/composer.lock') }}
        restore-keys: composer-${{ runner.os }}-

    - name: 🔍 Aktuelle Versionen ermitteln
      id: current
      run: |
        echo "📊 Ermittle aktuelle Craft CMS Versionen..."
        
        # Aktuelle Composer.json laden
        if [ -f "composer.json" ]; then
          echo "✅ composer.json gefunden"
          current_craft=$(grep -o '"craftcms/cms": "[^"]*"' composer.json | cut -d'"' -f4)
          echo "current_craft=${current_craft}" >> $GITHUB_OUTPUT
          echo "🎯 Aktuelle Craft Version Constraint: ${current_craft}"
        else
          echo "❌ composer.json nicht gefunden!"
          exit 1
        fi
        
        # Lock file Versionen
        if [ -f "composer.lock" ]; then
          current_installed=$(jq -r '.packages[] | select(.name=="craftcms/cms") | .version' composer.lock)
          echo "current_installed=${current_installed}" >> $GITHUB_OUTPUT
          echo "📦 Aktuell installiert: ${current_installed}"
        fi

    - name: 🔄 Composer Update Check
      id: updates
      run: |
        echo "🔍 Prüfe verfügbare Updates..."
        
        # Composer Update --dry-run
        composer update --dry-run --no-install --no-scripts --no-plugins > update_check.txt 2>&1
        
        # Updates analysieren
        if grep -q "craftcms/cms" update_check.txt; then
          echo "✅ Craft CMS Updates verfügbar!"
          updates_available="true"
          
          # Update Details extrahieren
          echo "📋 Update Details:"
          grep -A2 -B2 "craftcms/cms" update_check.txt || echo "Keine Details verfügbar"
          
          # Weitere Craft-Packages prüfen
          craft_updates=$(grep -E "(craftcms/|craft-)" update_check.txt | head -10)
          echo "craft_updates<<EOF" >> $GITHUB_OUTPUT
          echo "${craft_updates}" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
        else
          echo "ℹ️ Keine Craft CMS Updates verfügbar"
          updates_available="false"
        fi
        
        echo "updates_available=${updates_available}" >> $GITHUB_OUTPUT
        
        # Alle verfügbaren Updates loggen
        echo "📋 Kompletter Update Check:"
        cat update_check.txt

    - name: 📦 Updates durchführen
      if: steps.updates.outputs.updates_available == 'true'
      run: |
        echo "🔄 Führe Composer Updates durch..."
        
        # Backup der aktuellen composer.lock
        cp composer.lock composer.lock.backup
        
        # Composer Update
        composer update --no-interaction --prefer-dist --optimize-autoloader
        
        echo "✅ Composer Update abgeschlossen"
        
        # Änderungen anzeigen
        echo "📋 Composer.lock Änderungen:"
        git diff composer.lock || echo "Keine Änderungen in composer.lock"

    - name: 📋 Update Summary erstellen
      if: steps.updates.outputs.updates_available == 'true'
      id: summary
      run: |
        echo "📊 Erstelle Update Summary..."
        
        # Git Änderungen prüfen
        git add .
        
        if git diff --cached --quiet; then
          echo "ℹ️ Keine Änderungen nach Update"
          echo "summary=Keine Änderungen nach Composer Update" >> $GITHUB_OUTPUT
        else
          # Update Summary erstellen
          cat > UPDATE_SUMMARY.md << 'SUMMARY_EOF'
        # 🚀 Craft CMS Auto Update
        
        **Update Type:** ${{ steps.info.outputs.update_type }}
        **Triggered by:** ${{ steps.info.outputs.triggered_by }}
        **Timestamp:** $(date)
        **Pre-Update Backup:** ${{ needs.pre-update-backup.outputs.backup_file }}
        
        ## 📦 Updated Packages
        
        ${{ steps.updates.outputs.craft_updates }}
        
        ## 🔧 Changed Files
        
        ```
        $(git diff --cached --name-only)
        ```
        
        ## 💾 Safety Information
        
        - ✅ Database backup created before update
        - ✅ Backup location: `/var/backups/craft-cms/$(date +%Y/%m/%d)/`
        - ✅ Auto-rollback available if deployment fails
        
        ## 🧪 Testing Checklist
        
        - [ ] Admin Panel Login
        - [ ] Content Creation/Editing  
        - [ ] Frontend Display
        - [ ] Plugin Functionality
        - [ ] Database Migrations
        
        ---
        *Auto-generated by GitHub Actions*
        SUMMARY_EOF
          
          echo "summary=$(cat UPDATE_SUMMARY.md | head -20)" >> $GITHUB_OUTPUT
        fi

    - name: 🔄 Pull Request erstellen
      if: steps.updates.outputs.updates_available == 'true'
      id: pr
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: "🔄 Auto-update Craft CMS dependencies (${{ steps.info.outputs.update_type }})"
        title: "🔄 [${{ steps.info.outputs.update_type }}] Craft CMS Auto Update - $(date +%Y-%m-%d)"
        body-path: UPDATE_SUMMARY.md
        branch: auto-update-${{ github.run_id }}
        delete-branch: true
        labels: |
          auto-update
          craft-cms
          dependencies
        reviewers: |
          ${{ github.actor }}
        assignees: |
          ${{ github.actor }}

    - name: 📊 Update Results
      run: |
        if [ "${{ steps.updates.outputs.updates_available }}" = "true" ]; then
          echo "✅ Updates gefunden und PR erstellt!"
          echo "🔗 PR Nummer: ${{ steps.pr.outputs.pull-request-number }}"
          echo "🌿 Branch: auto-update-${{ github.run_id }}"
        else
          echo "ℹ️ Keine Updates verfügbar - kein PR erstellt"
        fi
        
        echo "💾 Pre-Update Backup: ${{ needs.pre-update-backup.outputs.backup_file }}"

  notification:
    name: 📱 Update Notification
    runs-on: ubuntu-latest
    needs: [pre-update-backup, craft-update]
    if: always()
    
    steps:
    - name: 📱 Slack Notification
      if: secrets.SLACK_WEBHOOK_URL != ''
      run: |
        # Status bestimmen
        if [ "${{ needs.craft-update.outputs.updates_available }}" = "true" ]; then
          if [ -n "${{ needs.craft-update.outputs.pr_number }}" ]; then
            status="✅ Updates gefunden - PR erstellt"
            color="good"
            emoji="🎉"
          else
            status="⚠️ Updates gefunden - PR Fehler"
            color="warning" 
            emoji="⚠️"
          fi
        else
          status="ℹ️ Keine Updates verfügbar"
          color="#439FE0"
          emoji="ℹ️"
        fi
        
        # Update Type
        update_type="${{ needs.craft-update.outputs.update_type || 'scheduled' }}"
        triggered_by="${{ needs.craft-update.outputs.triggered_by || 'github-scheduler' }}"
        
        # Slack Message
        curl -X POST -H 'Content-type: application/json' \
          --data '{
            "text": "'${emoji}' Craft CMS Update Check Complete",
            "attachments": [
              {
                "color": "'${color}'",
                "title": "🔄 Craft CMS Auto Update",
                "fields": [
                  {
                    "title": "Status",
                    "value": "'${status}'",
                    "short": true
                  },
                  {
                    "title": "Update Type",
                    "value": "'${update_type}'",
                    "short": true
                  },
                  {
                    "title": "Triggered By",
                    "value": "'${triggered_by}'",
                    "short": true
                  },
                  {
                    "title": "Pre-Update Backup",
                    "value": "${{ needs.pre-update-backup.outputs.backup_file }}",
                    "short": false
                  }
                ],
                "footer": "GitHub Actions • Craft CMS Auto-Updater",
                "ts": '$(date +%s)'
              }
            ]
          }' ${{ secrets.SLACK_WEBHOOK_URL }}

  cleanup:
    name: 🧹 Cleanup
    runs-on: ubuntu-latest
    needs: [pre-update-backup, craft-update]
    if: always()
    
    steps:
    - name: 🧹 Server Cleanup
      run: |
        echo "🧹 Cleanup alter Backup-Dateien..."
        
        ssh -o StrictHostKeyChecking=no \
            ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
          # Alte Update-Backups löschen (älter als 30 Tage)
          find /var/backups/craft-cms -name "*pre_update*.sql.gz" -mtime +30 -delete
          find /var/backups/craft-cms -name "*pre_update*.info" -mtime +30 -delete
          
          # Leere Verzeichnisse entfernen
          find /var/backups/craft-cms -type d -empty -delete
          
          echo "✅ Cleanup abgeschlossen"
          
          # Backup-Status anzeigen
          echo "📊 Aktuelle Backup-Situation:"
          du -sh /var/backups/craft-cms/ 2>/dev/null || echo "Backup-Verzeichnis leer"
        EOF
