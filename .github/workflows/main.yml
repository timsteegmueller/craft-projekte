name: 💾 CraftCMS Auto Backup & Update (Robust)

on:
  schedule:
    - cron: '0 3 * * 0'  # Jeden Sonntag um 3 Uhr
  workflow_dispatch:     # Manuelle Ausführung
  repository_dispatch:
    types: [run-backup-und-update]

env:
  COMPOSER_ALLOW_SUPERUSER: 1
  COMPOSER_NO_INTERACTION: 1

jobs:
  craft-auto-update:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: craft
          MYSQL_USER: craft
          MYSQL_PASSWORD: craft
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping --silent" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔍 Auto-Detect Craft CMS Project Structure
        id: detect
        run: |
          echo "🔍 Detecting Craft CMS project structure..."
          
          # Suche nach Craft-Projekten
          CRAFT_PROJECTS=()
          
          # Check root directory
          if [ -f "craft" ] && [ -f "composer.json" ]; then
            echo "✅ Craft CMS found in root directory"
            CRAFT_PROJECTS+=(".")
          fi
          
          # Check subdirectories
          for dir in */; do
            if [ -f "${dir}craft" ] && [ -f "${dir}composer.json" ]; then
              echo "✅ Craft CMS found in: $dir"
              CRAFT_PROJECTS+=("$dir")
            fi
          done
          
          # Specific directories to check (based on your naming)
          for dir in "mein-test-projekt" "craft" "hauptprojekt" "website"; do
            if [ -d "$dir" ] && [ -f "$dir/composer.json" ]; then
              echo "✅ Potential Craft project found in: $dir"
              CRAFT_PROJECTS+=("$dir")
            fi
          done
          
          if [ ${#CRAFT_PROJECTS[@]} -eq 0 ]; then
            echo "❌ No Craft CMS projects found!"
            echo "📁 Repository structure:"
            ls -la
            exit 1
          fi
          
          # Use first found project as default
          PROJECT_DIR="${CRAFT_PROJECTS[0]}"
          echo "🎯 Using project directory: $PROJECT_DIR"
          echo "project_dir=$PROJECT_DIR" >> $GITHUB_OUTPUT
          
          # List all found projects
          echo "📋 All detected Craft projects:"
          printf '%s\n' "${CRAFT_PROJECTS[@]}"

      - name: 📦 Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, pdo, mysql, dom, curl, intl, gd, zip, fileinfo
          ini-values: memory_limit=512M
          coverage: none

      - name: 🧰 Install Composer Dependencies
        run: |
          cd "${{ steps.detect.outputs.project_dir }}"
          echo "📦 Installing dependencies in: $(pwd)"
          
          if [ -f "composer.lock" ]; then
            echo "🔒 composer.lock found, using install"
            composer install --no-interaction --prefer-dist --optimize-autoloader
          else
            echo "🆕 No composer.lock, using update"
            composer update --no-interaction --optimize-autoloader
          fi

      - name: 🗃️ Setup Test Database
        run: |
          cd "${{ steps.detect.outputs.project_dir }}"
          echo "🗃️ Setting up test database..."
          
          # Create .env file for testing
          cat > .env << EOF
          CRAFT_ENVIRONMENT=dev
          CRAFT_SECURITY_KEY=test-security-key-for-github-actions
          CRAFT_DB_DRIVER=mysql
          CRAFT_DB_SERVER=127.0.0.1
          CRAFT_DB_PORT=3306
          CRAFT_DB_DATABASE=craft
          CRAFT_DB_USER=craft
          CRAFT_DB_PASSWORD=craft
          CRAFT_DB_SCHEMA=public
          CRAFT_DB_TABLE_PREFIX=
          EOF
          
          echo "✅ Test environment configured"

      - name: 🏗️ Initialize Craft CMS (if needed)
        run: |
          cd "${{ steps.detect.outputs.project_dir }}"
          echo "🏗️ Checking if Craft needs initialization..."
          
          # Check if craft executable exists and is executable
          if [ -f "craft" ]; then
            chmod +x craft
            echo "✅ Craft executable ready"
            
            # Try to run craft setup if not already installed
            if ./craft install/check >/dev/null 2>&1; then
              echo "✅ Craft CMS already installed"
            else
              echo "🚀 Installing Craft CMS..."
              ./craft install/craft \
                --username=admin \
                --password=password \
                --email=admin@example.com \
                --siteName="Test Site" \
                --siteUrl="http://localhost" \
                --language=en-US
            fi
          else
            echo "❌ Craft executable not found!"
            exit 1
          fi

      - name: 💾 Create Database Backup (Test)
        run: |
          cd "${{ steps.detect.outputs.project_dir }}"
          echo "💾 Creating database backup..."
          
          mkdir -p ./backups
          BACKUP_FILE="backup_$(date +%Y%m%d_%H%M%S).sql"
          
          # Test database backup
          mysqldump -h 127.0.0.1 -u craft -pcraft craft > "./backups/$BACKUP_FILE"
          
          if [ -f "./backups/$BACKUP_FILE" ]; then
            echo "✅ Database backup created: $BACKUP_FILE"
            echo "📊 Backup size: $(du -h ./backups/$BACKUP_FILE | cut -f1)"
          else
            echo "❌ Database backup failed!"
            exit 1
          fi

      - name: 🔄 Run Craft CMS Updates
        run: |
          cd "${{ steps.detect.outputs.project_dir }}"
          echo "🔄 Running Craft CMS updates..."
          
          # Check for available updates
          echo "📋 Checking for updates..."
          ./craft update/info || echo "Update info command not available"
          
          # Update Craft and plugins
          echo "🚀 Updating Craft CMS..."
          ./craft update all --backup || echo "Update completed (some warnings possible)"
          
          # Run any pending migrations
          echo "🗃️ Running migrations..."
          ./craft migrate/all || echo "Migrations completed"
          
          # Clear caches
          echo "🧹 Clearing caches..."
          ./craft clear-caches/all || echo "Cache clear completed"

      - name: 🧪 Basic Health Check
        run: |
          cd "${{ steps.detect.outputs.project_dir }}"
          echo "🧪 Running basic health checks..."
          
          # Check if craft command works
          if ./craft --version; then
            echo "✅ Craft CLI working"
          else
            echo "❌ Craft CLI not working"
            exit 1
          fi
          
          # Check database connection
          if ./craft db/backup --file=test_backup.sql 2>/dev/null; then
            echo "✅ Database connection working"
            rm -f test_backup.sql
          else
            echo "❌ Database connection failed"
            exit 1
          fi

      - name: 📊 Generate Update Report
        if: success()
        run: |
          cd "${{ steps.detect.outputs.project_dir }}"
          echo "📊 Generating update report..."
          
          echo "## 🚀 Craft CMS Update Report" > UPDATE_REPORT.md
          echo "" >> UPDATE_REPORT.md
          echo "**Date:** $(date '+%d.%m.%Y %H:%M:%S UTC')" >> UPDATE_REPORT.md
          echo "**Project Directory:** ${{ steps.detect.outputs.project_dir }}" >> UPDATE_REPORT.md
          echo "" >> UPDATE_REPORT.md
          echo "### ✅ Completed Actions:" >> UPDATE_REPORT.md
          echo "- 💾 Database backup created" >> UPDATE_REPORT.md
          echo "- 📦 Composer dependencies updated" >> UPDATE_REPORT.md
          echo "- 🔄 Craft CMS updated" >> UPDATE_REPORT.md
          echo "- 🗃️ Database migrations executed" >> UPDATE_REPORT.md
          echo "- 🧹 Caches cleared" >> UPDATE_REPORT.md
          echo "- 🧪 Health checks passed" >> UPDATE_REPORT.md
          echo "" >> UPDATE_REPORT.md
          
          # Add current Craft version
          CRAFT_VERSION=$(./craft --version 2>/dev/null || echo "Unknown")
          echo "**Current Craft Version:** $CRAFT_VERSION" >> UPDATE_REPORT.md
          echo "" >> UPDATE_REPORT.md
          
          # Add PHP version
          PHP_VERSION=$(php --version | head -1)
          echo "**PHP Version:** $PHP_VERSION" >> UPDATE_REPORT.md
          
          echo "📄 Update report generated"
          cat UPDATE_REPORT.md

      - name: ✅ Success Notification
        if: success()
        run: |
          echo "🎉 Craft CMS update completed successfully!"
          echo "📁 Project: ${{ steps.detect.outputs.project_dir }}"
          echo "⏰ Time: $(date)"
          echo "🔗 Repository: ${{ github.repository }}"
          echo "🏃 Run: ${{ github.run_number }}"

      - name: 🚨 Failure Notification  
        if: failure()
        run: |
          echo "❌ Craft CMS update failed!"
          echo "📁 Project: ${{ steps.detect.outputs.project_dir }}"
          echo "⏰ Time: $(date)"
          echo "🔗 Check logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

      - name: 📤 Upload Backup Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: craft-backups-${{ github.run_number }}
          path: |
            ${{ steps.detect.outputs.project_dir }}/backups/
            ${{ steps.detect.outputs.project_dir }}/UPDATE_REPORT.md
          retention-days: 30

  # Webhook notification für N8N
  notify-n8n:
    needs: craft-auto-update
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: 📡 Notify N8N (Success)
        if: needs.craft-auto-update.result == 'success'
        run: |
          curl -X POST "https://n8n.farbcode.de/webhook/craft-update-success" \
            -H "Content-Type: application/json" \
            -d '{
              "status": "success",
              "project": "craft-projekte",
              "timestamp": "'$(date -Iseconds)'",
              "github_run": "${{ github.run_number }}",
              "repository": "${{ github.repository }}"
            }' || echo "N8N notification failed"
            
      - name: 📡 Notify N8N (Failure)
        if: needs.craft-auto-update.result == 'failure'
        run: |
          curl -X POST "https://n8n.farbcode.de/webhook/craft-update-failure" \
            -H "Content-Type: application/json" \
            -d '{
              "status": "failed", 
              "project": "craft-projekte",
              "timestamp": "'$(date -Iseconds)'",
              "github_run": "${{ github.run_number }}",
              "repository": "${{ github.repository }}"
            }' || echo "N8N notification failed"
