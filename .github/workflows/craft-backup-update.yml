name: üíæ Update Composer Dependencies

on:
  repository_dispatch:
    types:
      - run-backup-und-update
  workflow_dispatch:
    inputs:
      force_update:
        description: 'Erzwinge Update (ignoriert Versionseinschr√§nkungen)'
        required: false
        type: boolean
        default: false

jobs:
  update-dependencies:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, intl, zip, gd, pdo_mysql
          coverage: none

      - name: Find Project Directory
        id: find-dir
        run: |
          # Craft-Projekte finden
          CRAFT_DIRS=()
          
          # Methode 1: Suche nach composer.json mit craftcms/cms
          while IFS= read -r file; do
            if grep -q '"craftcms/cms"' "$file"; then
              dir=$(dirname "$file")
              CRAFT_DIRS+=("$dir")
              echo "‚úÖ Craft-Projekt gefunden in: $dir (via composer.json)"
            fi
          done < <(find . -name "composer.json" -type f -not -path "*/vendor/*")
          
          # Wenn nichts gefunden, suche nach craft-Dateien
          if [ ${#CRAFT_DIRS[@]} -eq 0 ]; then
            while IFS= read -r file; do
              dir=$(dirname "$file")
              CRAFT_DIRS+=("$dir")
              echo "‚úÖ Craft-Projekt gefunden in: $dir (via craft binary)"
            fi
          done < <(find . -name "craft" -type f -not -path "*/vendor/*")
          
          # Wenn immer noch nichts gefunden, suche nach bekannten Verzeichnissen
          if [ ${#CRAFT_DIRS[@]} -eq 0 ]; then
            if [ -d "mein-test-projekt" ] && [ -f "mein-test-projekt/composer.json" ]; then
              CRAFT_DIRS+=("mein-test-projekt")
              echo "‚úÖ Craft-Projekt gefunden in: mein-test-projekt (via bekanntes Verzeichnis)"
            fi
          fi
          
          # Wenn mehrere Verzeichnisse gefunden, nimm das erste
          if [ ${#CRAFT_DIRS[@]} -gt 0 ]; then
            PROJECT_DIR="${CRAFT_DIRS[0]}"
          else
            # Fallback: Nehme das erste Verzeichnis mit composer.json
            first_composer=$(find . -name "composer.json" -not -path "*/vendor/*" | head -n 1)
            if [ -n "$first_composer" ]; then
              PROJECT_DIR=$(dirname "$first_composer")
              echo "‚ö†Ô∏è Kein Craft-Projekt gefunden, verwende: $PROJECT_DIR (enth√§lt composer.json)"
            else
              PROJECT_DIR="."
              echo "‚ö†Ô∏è Keine composer.json gefunden, verwende Root-Verzeichnis"
            fi
          fi
          
          echo "Ausgew√§hltes Projekt-Verzeichnis: $PROJECT_DIR"
          echo "project_dir=$PROJECT_DIR" >> $GITHUB_OUTPUT

      - name: Composer Update
        id: composer-update
        working-directory: ${{ steps.find-dir.outputs.project_dir }}
        run: |
          echo "=== Working in $(pwd) ==="
          
          # Composer-Status
          echo "=== Composer-Version ==="
          composer --version
          
          # Force-Update-Parameter
          UPDATE_FLAGS="--no-interaction"
          if [[ "${{ github.event.inputs.force_update }}" == "true" ]]; then
            echo "Force-Update aktiviert!"
            UPDATE_FLAGS="$UPDATE_FLAGS --with-all-dependencies"
          else
            # Normale Updates innerhalb der Versionseinschr√§nkungen
            UPDATE_FLAGS="$UPDATE_FLAGS --prefer-stable"
          fi
          
          # Pr√ºfe, ob composer.json existiert
          if [ ! -f "composer.json" ]; then
            echo "‚ö†Ô∏è composer.json nicht gefunden!"
            exit 1
          fi
          
          # Speichere den urspr√ºnglichen Zustand f√ºr Vergleich
          cp composer.json composer.json.bak
          if [ -f "composer.lock" ]; then
            cp composer.lock composer.lock.bak
          fi
          
          # F√ºhre composer update aus
          echo "=== Running composer update $UPDATE_FLAGS ==="
          composer update $UPDATE_FLAGS
          
          # Pr√ºfe, ob √Ñnderungen vorgenommen wurden
          if diff -q composer.json composer.json.bak >/dev/null && 
             ([ ! -f "composer.lock" ] || diff -q composer.lock composer.lock.bak >/dev/null); then
            echo "Keine √Ñnderungen an composer.json oder composer.lock festgestellt"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "‚úÖ √Ñnderungen an Composer-Dateien festgestellt"
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi
          
          # Entferne Backup-Dateien
          rm -f composer.json.bak composer.lock.bak

      - name: Show Dependency Changes
        if: steps.composer-update.outputs.has_changes == 'true'
        working-directory: ${{ steps.find-dir.outputs.project_dir }}
        run: |
          echo "=== √Ñnderungen an Composer-Abh√§ngigkeiten ==="
          
          if [ -f "composer.lock" ]; then
            # Zeige die wichtigsten √Ñnderungen an
            php -r '
              $lockData = json_decode(file_get_contents("composer.lock"), true);
              if (isset($lockData["packages"])) {
                  echo "Installierte Pakete:\n";
                  foreach ($lockData["packages"] as $package) {
                      echo "- " . $package["name"] . ": " . $package["version"] . "\n";
                  }
              }
            ' | grep -E "(craftcms|plugin)"
          fi

      - name: Configure Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Create and Push Branch
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Erzeuge Branch-Namen mit Datum
          DATESTAMP=$(date +'%Y-%m-%d')
          BRANCH_NAME="update/composer-$DATESTAMP"
          
          # Pr√ºfe, ob Branch bereits existiert
          if git ls-remote --heads origin "$BRANCH_NAME" | grep -q "$BRANCH_NAME"; then
            # F√ºge Timestamp hinzu, um eindeutigen Namen zu haben
            TIMESTAMP=$(date +'%H%M%S')
            BRANCH_NAME="update/composer-$DATESTAMP-$TIMESTAMP"
          fi
          
          echo "Erstelle Branch: $BRANCH_NAME"
          git checkout -b "$BRANCH_NAME"
          
          # F√ºge √Ñnderungen hinzu
          PROJECT_DIR="${{ steps.find-dir.outputs.project_dir }}"
          git add "$PROJECT_DIR/composer.json" "$PROJECT_DIR/composer.lock" || true
          
          # Commit-Nachricht basierend auf √Ñnderungen
          if [[ "${{ steps.composer-update.outputs.has_changes }}" == "true" ]]; then
            git commit -m "chore(deps): Update Composer-Abh√§ngigkeiten" || git commit --allow-empty -m "chore: Composer-Update (keine √Ñnderungen)"
          else
            git commit --allow-empty -m "chore: Composer-Update gepr√ºft (keine √Ñnderungen)"
          fi
          
          # Branch pushen
          git push --set-upstream origin "$BRANCH_NAME"
          echo "::notice::Branch $BRANCH_NAME wurde erstellt und gepusht"
