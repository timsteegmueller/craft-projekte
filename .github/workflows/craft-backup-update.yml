# ====================================================================================
#  💾 CraftCMS Auto Backup & Update Workflow (Version 1.8 - Final)
# ====================================================================================
#  Diese GitHub Action führt die Kernlogik des Update-Prozesses aus.
#  Sie wird extern durch einen `repository_dispatch`-Event (z.B. von n8n) ausgelöst.
#
#  Workflow-Schritte:
#  1. Startet einen temporären MySQL-Datenbank-Service.
#  2. Checkt den Code des Repositories aus.
#  3. Richtet eine PHP-Umgebung ein.
#  4. Stellt sicher, dass eine composer.lock-Datei vorhanden ist (Best Practice).
#  5. Installiert die Composer-Abhängigkeiten (muss VOR der .env-Erstellung laufen).
#  6. Erstellt eine dynamische .env Datei mit den korrekten DB-Secrets für diesen Lauf.
#  7. Überprüft aktiv die Datenbankverbindung.
#  8. Erstellt ein Sicherheits-Backup (mit --no-tablespaces Flag).
#  9. Führt das `php craft update all` Kommando aus.
#  10. Committet Änderungen in einen neuen Branch und pusht diesen.
# ====================================================================================

name: 💾 CraftCMS Auto Backup & Update

on:
  repository_dispatch:
    types: [run-backup-und-update]

jobs:
  craft-auto-update:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
          MYSQL_USER: ${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    
    steps:
      # Schritt 1: Code des Repositories in den Runner laden.
      - name: 📥 Checkout Repo
        uses: actions/checkout@v4

      # Schritt 2: PHP-Umgebung einrichten.
      - name: 📦 Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.2
          extensions: mbstring, pdo_mysql, dom, curl, intl, gd, zip, fileinfo
          ini-values: memory_limit=512M, post_max_size=64M, upload_max_filesize=64M
          coverage: none
      
      # Schritt 3: Sicherstellen, dass eine composer.lock-Datei existiert.
      - name: ✅ Check for composer.lock
        run: |
          if [ ! -f ./mein-test-projekt/composer.lock ]; then
            echo "Fehler: Die Datei composer.lock wurde nicht im Repository gefunden. Ein deterministisches Update ist nicht möglich."
            exit 1
          fi
        # WICHTIG: Passe diesen Pfad an die Struktur deines Projekts an.
        working-directory: .

      # Schritt 4: Composer-Abhängigkeiten installieren.
      # Dieser Schritt muss VOR dem Erstellen der .env-Datei laufen, um ein Überschreiben zu verhindern.
      - name: 🧰 Install Composer Dependencies
        run: composer install --no-interaction --prefer-dist --optimize-autoloader
        # WICHTIG: Passe diesen Pfad an die Struktur deines Projekts an.
        working-directory: ./mein-test-projekt

      # Schritt 5: Dynamische .env-Datei für die Workflow-Umgebung erstellen.
      - name: 📝 Create .env File
        working-directory: ./mein-test-projekt # WICHTIG: Pfad anpassen!
        run: |
          echo "Generiere finale .env-Datei für die GitHub Action..."
          # Diese Datei wird jetzt NACH composer install erstellt und ist somit die finale Version.
          echo "DB_DRIVER=mysql" > .env
          echo "DB_SERVER=127.0.0.1" >> .env
          echo "DB_PORT=3306" >> .env
          echo "DB_DATABASE=${{ secrets.MYSQL_DATABASE }}" >> .env
          echo "DB_USER=${{ secrets.MYSQL_USER }}" >> .env
          echo "DB_PASSWORD=${{ secrets.MYSQL_PASSWORD }}" >> .env
          echo "SECURITY_KEY=$(openssl rand -base64 32)" >> .env
          echo "ENVIRONMENT=dev" >> .env
      
      # Schritt 6: Datenbankverbindung prüfen.
      - name: 🩺 Verify MySQL Connection
        env:
          MYSQL_USER: ${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
        run: |
          echo "Warte auf die Datenbank..."
          for i in {1..15}; do
            if mysql -h 127.0.0.1 -u"${MYSQL_USER}" -p"${MYSQL_PASSWORD}" -e "SELECT 1" &> /dev/null; then
              echo "Datenbankverbindung erfolgreich hergestellt!"
              break
            fi
            echo "Warte auf die MySQL-Datenbank... (Versuch $i)"
            sleep 1
          done
          mysqladmin -h 127.0.0.1 -u"${MYSQL_USER}" -p"${MYSQL_PASSWORD}" status

      # Schritt 7: Datenbank-Backup erstellen.
      - name: 💾 Backup Database
        env:
          MYSQL_USER: ${{ secrets.MYSQL_USER }}
          MYSQL_PWD: ${{ secrets.MYSQL_PASSWORD }}
          MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
        run: |
          mkdir -p ./backups
          # --no-tablespaces hinzugefügt, um den 'Access denied' Fehler bei mysqldump zu verhindern.
          mysqldump --no-tablespaces --column-statistics=0 -h 127.0.0.1 -u"$MYSQL_USER" "$MYSQL_DATABASE" > ./backups/backup_$(date +%Y-%m-%d).sql
        working-directory: ./mein-test-projekt # WICHTIG: Pfad anpassen!
      
      # Schritt 8: Das eigentliche Craft CMS Update ausführen.
      - name: 🔁 Run PHP Craft Update
        run: php craft update all --interactive=0
        working-directory: ./mein-test-projekt # WICHTIG: Pfad anpassen!
      
      # Schritt 9: Git konfigurieren.
      - name: 📝 Configure Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
      
      # Schritt 10: Änderungen committen und pushen.
      - name: ✨ Create Branch, Commit and Push Changes
        id: commit_push
        run: |
          if git diff --quiet --exit-code ./mein-test-projekt/composer.lock ./mein-test-projekt/composer.json; then
            echo "Keine neuen Updates gefunden. Der Prozess wird hier beendet."
            echo "changes_pushed=false" >> $GITHUB_OUTPUT
          else
            echo "Änderungen in composer-Dateien gefunden. Erstelle neuen Branch..."
            NEW_BRANCH="updates/automated-craft-updates-$(date +%Y-%m-%d)"
            git checkout -b $NEW_BRANCH
            git add ./mein-test-projekt/composer.lock ./mein-test-projekt/composer.json
            git commit -m "chore(deps): 🤖 Automatisierte Craft CMS & Plugin Updates"
            git push --set-upstream origin $NEW_BRANCH
            echo "changes_pushed=true" >> $GITHUB_OUTPUT
            echo "branch_name=$NEW_BRANCH" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      # Schritt 11: Erfolgsmeldung im Log.
      - name: ✅ Done
        run: echo "Backup- und Update-Prozess erfolgreich abgeschlossen!"
