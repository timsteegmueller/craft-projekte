name: üíæ Update Composer Dependencies

on:
  repository_dispatch:
    types:
      - run-backup-und-update
  workflow_dispatch:

jobs:
  update-dependencies:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, intl, zip
          coverage: none

      - name: Find Project Directory
        id: find-dir
        run: |
          # Pr√ºfe ob mein-test-projekt existiert
          if [ -d "mein-test-projekt" ] && [ -f "mein-test-projekt/composer.json" ]; then
            PROJECT_DIR="mein-test-projekt"
          else
            # Finde erstes Verzeichnis mit composer.json
            PROJECT_DIR=$(find . -name "composer.json" -not -path "*/vendor/*" | head -n 1 | xargs dirname || echo ".")
          fi
          
          echo "Verwende Projekt-Verzeichnis: $PROJECT_DIR"
          echo "project_dir=$PROJECT_DIR" >> $GITHUB_OUTPUT

      - name: Direct Composer Update
        working-directory: ${{ steps.find-dir.outputs.project_dir }}
        run: |
          echo "=== Working in $(pwd) ==="
          
          # Speichere die original composer.json/lock
          cp composer.json composer.json.original || true
          cp composer.lock composer.lock.original || true
          
          # F√ºhre Composer Update durch
          echo "=== Running composer update ==="
          composer update --no-scripts --no-interaction

      - name: Configure Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Create and Push Branch
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Erzeuge einen eindeutigen Branch-Namen
          TIMESTAMP=$(date +'%Y%m%d%H%M%S')
          BRANCH_NAME="update/composer-$TIMESTAMP"
          
          # Erstelle einen neuen Branch
          git checkout -b "$BRANCH_NAME"
          
          # F√ºge die ge√§nderten Dateien hinzu
          PROJECT_DIR="${{ steps.find-dir.outputs.project_dir }}"
          git add "$PROJECT_DIR/composer.json" "$PROJECT_DIR/composer.lock" || true
          
          # Erstelle einen Commit, auch wenn leer
          git commit -m "Update composer dependencies" || git commit --allow-empty -m "Dependency update (no changes)"
          
          # Push den Branch
          git push --set-upstream origin "$BRANCH_NAME"
          
          echo "::notice::Branch $BRANCH_NAME wurde erstellt und gepusht"
