# ====================================================================================
#  üíæ CraftCMS Auto Backup & Update Workflow (Version 1.7 - Dynamic .env)
# ====================================================================================
#  Diese GitHub Action f√ºhrt die Kernlogik des Update-Prozesses aus.
#
#  Workflow-Schritte:
#  1. Startet einen tempor√§ren MySQL-Datenbank-Service.
#  2. Checkt den Code des Repositories aus.
#  3. Richtet eine PHP-Umgebung ein.
#  4. Erstellt eine dynamische .env Datei mit den DB-Secrets f√ºr den Runner.
#  5. Installiert die Composer-Abh√§ngigkeiten.
#  6. √úberpr√ºft aktiv die Datenbankverbindung.
#  7. Erstellt ein Sicherheits-Backup.
#  8. F√ºhrt das `php craft update all` Kommando aus.
#  9. Committet √Ñnderungen in einen neuen Branch und pusht diesen.
# ====================================================================================

name: üíæ CraftCMS Auto Backup & Update

on:
  repository_dispatch:
    types: [run-backup-und-update]

jobs:
  craft-auto-update:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
          MYSQL_USER: ${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    
    steps:
      # Schritt 1: Code des Repositories in den Runner laden.
      - name: üì• Checkout Repo
        uses: actions/checkout@v4

      # Schritt 2: PHP-Umgebung einrichten.
      - name: üì¶ Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.2
          extensions: mbstring, pdo_mysql, dom, curl, intl, gd, zip, fileinfo
          ini-values: memory_limit=512M, post_max_size=64M, upload_max_filesize=64M
          coverage: none

      # Schritt 3: Dynamische .env-Datei f√ºr die Workflow-Umgebung erstellen.
      - name: üìù Create .env File
        working-directory: ./mein-test-projekt # WICHTIG: Pfad anpassen!
        run: |
          echo "Generiere .env-Datei f√ºr die GitHub Action..."
          echo "DB_DRIVER=mysql" > .env
          echo "DB_SERVER=127.0.0.1" >> .env
          echo "DB_PORT=3306" >> .env
          echo "DB_DATABASE=${{ secrets.MYSQL_DATABASE }}" >> .env
          echo "DB_USER=${{ secrets.MYSQL_USER }}" >> .env
          echo "DB_PASSWORD=${{ secrets.MYSQL_PASSWORD }}" >> .env
          echo "SECURITY_KEY=$(openssl rand -base64 32)" >> .env
          echo "ENVIRONMENT=dev" >> .env
      
      # Schritt 4: Composer-Abh√§ngigkeiten installieren.
      - name: üß∞ Install Composer Dependencies
        run: composer install --no-interaction --prefer-dist --optimize-autoloader
        working-directory: ./mein-test-projekt # WICHTIG: Pfad anpassen!
      
      # Schritt 5: Datenbankverbindung pr√ºfen.
      - name: ü©∫ Verify MySQL Connection
        env:
          MYSQL_USER: ${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
        run: |
          echo "Warte auf die Datenbank..."
          for i in {1..15}; do
            if mysql -h 127.0.0.1 -u"${MYSQL_USER}" -p"${MYSQL_PASSWORD}" -e "SELECT 1" &> /dev/null; then
              echo "Datenbankverbindung erfolgreich hergestellt!"
              break
            fi
            echo "Warte auf die MySQL-Datenbank... (Versuch $i)"
            sleep 1
          done
          mysqladmin -h 127.0.0.1 -u"${MYSQL_USER}" -p"${MYSQL_PASSWORD}" status

      # Schritt 6: Datenbank-Backup erstellen.
      - name: üíæ Backup Database
        env:
          MYSQL_USER: ${{ secrets.MYSQL_USER }}
          MYSQL_PWD: ${{ secrets.MYSQL_PASSWORD }}
          MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
        run: |
          mkdir -p ./backups
          mysqldump --column-statistics=0 -h 127.0.0.1 -u"$MYSQL_USER" "$MYSQL_DATABASE" > ./backups/backup_$(date +%Y-%m-%d).sql
        working-directory: ./mein-test-projekt # WICHTIG: Pfad anpassen!
      
      # Schritt 7: Das eigentliche Craft CMS Update ausf√ºhren.
      - name: üîÅ Run PHP Craft Update
        run: php craft update all --interactive=0
        working-directory: ./mein-test-projekt # WICHTIG: Pfad anpassen!
      
      # Schritt 8: Git konfigurieren.
      - name: üìù Configure Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
      
      # Schritt 9: √Ñnderungen committen und pushen.
      - name: ‚ú® Create Branch, Commit and Push Changes
        id: commit_push
        run: |
          if git diff --quiet --exit-code ./mein-test-projekt/composer.lock ./mein-test-projekt/composer.json; then
            echo "Keine neuen Updates gefunden. Der Prozess wird hier beendet."
            echo "changes_pushed=false" >> $GITHUB_OUTPUT
          else
            echo "√Ñnderungen in composer-Dateien gefunden. Erstelle neuen Branch..."
            NEW_BRANCH="updates/automated-craft-updates-$(date +%Y-%m-%d)"
            git checkout -b $NEW_BRANCH
            git add ./mein-test-projekt/composer.lock ./mein-test-projekt/composer.json
            git commit -m "chore(deps): ü§ñ Automatisierte Craft CMS & Plugin Updates"
            git push --set-upstream origin $NEW_BRANCH
            echo "changes_pushed=true" >> $GITHUB_OUTPUT
            echo "branch_name=$NEW_BRANCH" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      # Schritt 10: Erfolgsmeldung im Log.
      - name: ‚úÖ Done
        run: echo "Backup- und Update-Prozess erfolgreich abgeschlossen!"```

### 4. n8n Workflow importieren & konfigurieren

1.  **Credentials in n8n anlegen:**
    -   **GitHub API:** Erstelle eine "GitHub API"-Credential mit einem [Personal Access Token (PAT)](https://github.com/settings/tokens). Der Token ben√∂tigt mindestens die Scopes `repo` und `workflow`.
    -   **Slack Webhook:** Lege eine "Slack Webhook"-Credential an oder speichere die Webhook-URL in den n8n-Secrets.

2.  **Workflow importieren:** Importiere den folgenden JSON-Code in deine n8n-Instanz.

```json
{
  "name": "Craft CMS Updater",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "weeks",
              "triggerAtHour": 3
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        220,
        100
      ],
      "name": "‚è∞ Weekly Trigger"
    },
    {
      "parameters": {
        "jsCode": "const repo = 'craft-projekte';\nconst owner = 'timsteegmueller';\n\nreturn [{ \n  json: { \n    repo: repo,\n    owner: owner,\n    source: 'weekly-schedule',\n    full_name: `${owner}/${repo}`\n  } \n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        460,
        100
      ],
      "name": "üìã GitHub Config"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.github.com/repos/{{ $json.owner }}/{{ $json.repo }}/dispatches",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "githubApi",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"event_type\": \"run-backup-und-update\"\n}\n"
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        680,
        100
      ],
      "name": "üöÄ Trigger GitHub Action",
      "credentials": {
        "githubApi": {
          "id": "YOUR_GITHUB_CREDENTIAL_ID",
          "name": "GitHub API Credential"
        }
      }
    },
    {
      "parameters": {
        "url": "=https://api.github.com/repos/{{ $json.owner }}/{{ $json.repo }}/actions/runs?event=repository_dispatch",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "githubApi"
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1120,
        100
      ],
      "name": "üìä Check Action Status",
      "credentials": {
        "githubApi": {
          "id": "YOUR_GITHUB_CREDENTIAL_ID",
          "name": "GitHub API Credential"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "conditions": [
            {
              "leftValue": "={{ $json.workflow_runs[0].status }}",
              "operator": {
                "type": "string",
                "operation": "equals"
              },
              "rightValue": "completed"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1340,
        100
      ],
      "name": "‚úÖ Action Complete?"
    },
    {
      "parameters": {
        "conditions": {
          "conditions": [
            {
              "leftValue": "={{ $json.workflow_runs[0].conclusion }}",
              "operator": {
                "type": "string",
                "operation": "equals"
              },
              "rightValue": "success"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1560,
        100
      ],
      "name": "üéâ Success?"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.github.com/repos/{{ $json.owner }}/{{ $json.repo }}/pulls",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "githubApi",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"title\": \"ü§ñ Automatisierte Craft CMS Updates\",\n  \"head\": \"updates/automated-craft-updates-{{ $now.toFormat('yyyy-MM-dd') }}\",\n  \"base\": \"main\",\n  \"body\": \"## üöÄ Automatisches Craft CMS Update\\n\\n**Ausgel√∂st durch:** `{{ $json.source }}`\\n**Zeitstempel:** `{{ $now.toFormat('dd.MM.yyyy HH:mm') }}`\\n\\n### ‚úÖ Abgeschlossene Aktionen:\\n- üíæ Datenbank-Backup via GitHub Actions\\n- üîÑ Craft CMS & Plugin-Updates (`php craft update all`)\\n- üì¶ Composer-Abh√§ngigkeiten aktualisiert\\n\\nDieser Pull Request wurde automatisch erstellt und enth√§lt die neuesten Updates. Bitte √ºberpr√ºfen und mergen. üéØ\"\n}"
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1780,
        200
      ],
      "name": "üì§ Create Pull Request",
      "credentials": {
        "githubApi": {
          "id": "YOUR_GITHUB_CREDENTIAL_ID",
          "name": "GitHub API Credential"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $secrets.FARBCODE_SLACK_WEBHOOK }}",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"channel\": \"#general\",\n  \"username\": \"craft-automation\",\n  \"icon_emoji\": \":rocket:\",\n  \"text\": \"üöÄ Craft CMS Update erfolgreich! Pull Request erstellt.\",\n  \"attachments\": [{\n    \"color\": \"good\",\n    \"title\": \"‚úÖ Pull Request zur √úberpr√ºfung bereit\",\n    \"title_link\": \"{{ $json.html_url }}\",\n    \"fields\": [\n      {\n        \"title\": \"Repository\",\n        \"value\": \"<https://github.com/{{ $json.full_name }}|{{ $json.full_name }}>\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Trigger\",\n        \"value\": \"{{ $json.source }}\",\n        \"short\": true\n      }\n    ],\n    \"footer\": \"farbcode Craft Automation\"\n  }]\n}"
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2000,
        200
      ],
      "name": "‚úÖ Slack Success"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $secrets.FARBCODE_SLACK_WEBHOOK }}",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"channel\": \"#alerts\",\n  \"username\": \"craft-automation\",\n  \"icon_emoji\": \":warning:\",\n  \"text\": \"üö® Craft CMS Update fehlgeschlagen!\",\n  \"attachments\": [{\n    \"color\": \"danger\",\n    \"title\": \"‚ùå GitHub Action fehlgeschlagen\",\n    \"title_link\": \"https://github.com/{{ $json.full_name }}/actions/runs/{{ $json.workflow_runs[0].id }}\",\n    \"fields\": [\n      {\n        \"title\": \"Repository\",\n        \"value\": \"<https://github.com/{{ $json.full_name }}|{{ $json.full_name }}>\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Fehler\",\n        \"value\": \"{{ $json.workflow_runs[0].conclusion }}\",\n        \"short\": true\n      }\n    ]\n  }]\n}"
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1780,
        0
      ],
      "name": "üö® Slack Error"
    },
    {
      "parameters": {
        "time": 2,
        "unit": "minutes"
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 2,
      "position": [
        900,
        100
      ],
      "name": "‚è≥ Wait for Action"
    }
  ],
  "connections": {
    "‚è∞ Weekly Trigger": { "main": [ [ { "node": "üìã GitHub Config", "type": "main", "index": 0 } ] ] },
    "üìã GitHub Config": { "main": [ [ { "node": "üöÄ Trigger GitHub Action", "type": "main", "index": 0 } ] ] },
    "üöÄ Trigger GitHub Action": { "main": [ [ { "node": "‚è≥ Wait for Action", "type": "main", "index": 0 } ] ] },
    "‚è≥ Wait for Action": { "main": [ [ { "node": "üìä Check Action Status", "type": "main", "index": 0 } ] ] },
    "üìä Check Action Status": { "main": [ [ { "node": "‚úÖ Action Complete?", "type": "main", "index": 0 } ] ] },
    "‚úÖ Action Complete?": { "main": [ [], [ { "node": "üéâ Success?", "type": "main", "index": 0 } ] ] },
    "üéâ Success?": { "main": [ [ { "node": "üö® Slack Error", "type": "main", "index": 0 } ], [ { "node": "üì§ Create Pull Request", "type": "main", "index": 0 } ] ] },
    "üì§ Create Pull Request": { "main": [ [ { "node": "‚úÖ Slack Success", "type": "main", "index": 0 } ] ] }
  }
}
